-- этот файл содержит описание МУУ в виде автомата МИЛИ, предназначенного для выполнения умножения и сложения
-- sko формируется после получения произведения 
-- используются следующие микрокоманды
-- nmk неактивная мк, действия не выполняются
-- mk1 прием [A],[B], очистка RR, инициализация i
-- mk2  RR=RR+RA
-- mk3  RR=RR-RA
-- mk4  RR=RA+RB
-- mk5  сдвиг RR, сдвиг RB, i=i+1
-- mk6  RR=+[0]
-- mk7  запись признака результата
-- Если разряд множителя равен нулю, такт суммирования не пропускается. По этой причине в 78 строке кода используется неактивная микрокоманда

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.mk_pack.all;	-- подключаем пакет с описанием микрокоманд


entity control_unit_bo_with_mk is

	port
	(
		clk		 : in	std_logic; -- тактовый сигнал
		set 		 : in	std_logic; --  сигнал начальной установки
		cop		 : in	std_logic; --  код операции 1-умножение,0 - сложение
		x	 		 : in	std_logic_vector(3 downto 0);-- логические условия(i=n-1, отрицательный ноль, текущий разряд, знаковый
		sno		 : in	std_logic; -- сигнал начала операции
		sko	 	 : out	std_logic; -- сигнал конца операции
		y	 		 : out control_y;   -- управляющие сигналы для блока операций
		-- следующие сигналы добавлены для отладки
--		incr_i	 : buffer std_logic; -- разрешение инкремента i
		s_out		 : out   integer range 0 to 3; --  отладочный выход для наблюдения состояний
		next_state_out : out   integer range 0 to 3 --  отладочный выход для наблюдения состояний
	);

end entity;

architecture behav of control_unit_bo_with_mk is

	type state_type is (s0, s1, s2, s3); -- определяем состояния МУУ

	signal next_state, state : state_type; -- следующее состояние, текущее состояние
--	signal i : integer range 1 to 3 ; -- счетчик анализируемых разрядов множителя

begin

TS: process (clk,set) -- этот процесс определяет текущее состояние МУУ
	 begin
		if set = '1' then
			state <= s0;
		elsif (rising_edge(clk)) then -- по положительному фронту переключаются состояния
			state <= next_state;			
		end if;
	 end process;
	 
NS: process (state,sno,x,cop) -- этот процесс определяет следующее состояние МУУ, управляющие сигналы для БО
	 begin

			case state is
				when s0=> -- переходы из s0
				 
					if (sno = '1') then
						next_state <= s1; y<=mk1; -- если есть сигнал начала операции
					else
						next_state <= s0; y<=nmk; -- иначе состояние не меняется
					end if;
				when s1=>
				   
					next_state <= s2; -- из s1 всегда переходим в s2
					if  cop='0' then	-- если сложение
						y<=mk4; --RR=RA+RB
					elsif x(1 downto 0) = "10"  then
						y<=mk2; -- RR=RR +RA  													
					elsif x(1 downto 0)="01" then
						y<=mk3; -- RR=RR -RA
					else 
						y<=nmk; -- RR=RR+0 
					end if;
				when s2=>
					if x(3) = '1' then
						next_state <= s0; y<=nmk; -- формируем сигнал конца операции
					elsif cop='1' then 							-- если умножение
						next_state <= s1; y<=mk5;  -- иначе сдвиг RR, сдвиг RB
					elsif cop='0' and x(2)='0' then			-- если сложение и нет отрицательного нуля
					   next_state <= s0; y<=mk7;  -- иначе запись признака в RPR
					else
						next_state <= s3; y<=mk6;  -- иначе если сложение и есть отрицательный ноль, то обнуляем RR
					end if;
				when s3 =>
						next_state <= s0; y<=mk7;  -- иначе запись признака в RPR
				
			end case;			
	end process;
	
	sko<='1' when (state=s2 and (x(3)='1' or (cop='0'and x(2)='0'))) or state =s3 else -- формирование sko
			'0';
--	incr_i<='1' when state=s2 and i/=3 else --инкремент i
--			'0';
--count_i:   process (sno, clk) -- этот процесс определяет поведение счетчика i
	
--	begin
--		if (sno='1') then i<=1; --устанавливаем в начальное состояние
--		elsif clk'event and clk='1' then 
--		  if (incr_i='1') then i<=i+1; -- инкремент счетчика
--		  end if;
--		 end if;
--	end process;
	s_out<=0 when state=s0 else
			 1 when state=s1 else					
			 2 when state=s2 else
			 3;
	next_state_out<=0 when next_state=s0 else
			 1 when next_state=s1 else					
			 2 when next_state=s2 else
			 3;

end behav;