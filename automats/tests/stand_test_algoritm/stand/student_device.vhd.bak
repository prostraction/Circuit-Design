library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity multiply2 is --интерфейс устройства
Port (
X : in STD_LOGIC_VECTOR (0 to 3); --четырехразрядное множимое
Y : in STD_LOGIC_VECTOR (0 to 3); --четырехразрядный множитель
res : out STD_LOGIC_VECTOR (0 to 7) --восьмиразрядный результат
);

end multiply2; --умножение дробных обратных чисел
architecture arch of multiply2 is
begin
process (X,Y)
variable A: STD_LOGIC_VECTOR (0 to 6); --регистр множимого
variable B: STD_LOGIC_VECTOR (0 to 3); --регистр множителя
variable S: STD_LOGIC_VECTOR (0 to 7); --регистр суммы
variable c: integer range 0 to 3; --счетчик
begin
S := "00000000"; --инициализация суммы нулями
C := 3; --инициализация счетчика 3
A :=  X(0) & X & X(0) & X(0); --регистр расширенного множимого, с учетом обратного кода.
--Новые разряды заполняются знаковым разрядом
--Кроме того, запись производится с учетом предварительного циклического сдвига
B := Y; -- регистр множителя

while(C /= 0) loop --цикл прохода по всем разрядам множителя
	
	if(B(1)='1') --если разряд множителя - 1
	then 
		S:=S+0;--к сумме прибавляется ноль.
	else
		S:=S+A; 
		--к сумме прибавляется циклически сдвинутый вправо регистр множимого
		
		if( S(0) = '0')--если произошло переполнение
		then
			S:=S+S(0); --производится суммирование в младший разряд
		end if;
	end if;
	A := A(6) & A(0 to 5); --производится циклический сдвиг регистра множимого
	C:=C-1; --уменьшение счетчика
	B:=B(0)&B(2 to 3)&B(1); --циклический сдвиг множителя
	S(0):='0'; --очистка разряда переноса
end loop;

if( B(0) =  '1')--если множитель отрицателен - необходима коррекция
then 
	S:= S + NOT(A(1)&A(5 to 6)&A(0)&A(2 to 4)); --[-[A]о]о
	if(S(0)='1')--обработка переноса
	then
		S:= S + S(0);
		S(0):='0';
	end if;
	
	S:= S + A;--+[A]о*2^n
	if(S(0)='1')--обработка переноса
	then
		S:= S + S(0); --очистка регистра переноса более не нужна
	end if;
	
end if;

res <= S(1 to 7)&s(1);--вывод результата, расширенного до 8 разрядов

end process;
end arch;
