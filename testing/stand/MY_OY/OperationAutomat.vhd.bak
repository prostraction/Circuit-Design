-- ¬ этом файле содержитс€ описание операционного автомата
-- ќј выполн€ет микрооперации, кажда€ из которых задаетс€ своим управл€ющим сигналом у
-- и формирует логические услови€ х

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity OperationAutomat is
generic(n:integer:=4);	-- параметр n определ€ет разр€дность операндов
Port
		(y: in std_logic_vector(9 downto 0);    		--управл€ющие сигналы,задают микрооперации
	   x: out std_logic_vector(2 downto 0);   		--логические услови€
	   a: in std_logic_vector(n-1 downto 0);  		--1-ый операнд(множимое)
	   b: in std_logic_vector(n-1 downto 0);  		--2-ой операнд (множитель)
	   rc: buffer std_logic_vector(2*n-1 downto 0);	--результат (произведение)
	   clk: in std_logic										--синхросигнал 
);
end OperationAutomat;
architecture arch of OperationAutomat is
   signal ra: std_logic_vector(2*n-1 downto 0);		--регистр множимого
   signal rb: std_logic_vector(n downto 0);		--регистр множител€
   signal i: integer range 1 to n;						--счетчик анализируемого разр€да
begin
execution_mo:
   process(clk)	-- этот процесс описывает выполн€емые в ќј микрооперации
   begin
   if clk' event and clk='1' then			-- по положительному фронту clk
	
	if (y(0)='1') then ra(2*n-1 downto n)<=(others=>a(n-1)); ra(n-1 downto 0)<=a;--прием в ra множимого с расширением знака 
	end if;
	if (y(1)='1') then rb<=b&'0';					-- прием в rb множител€
	end if;
	if (y(2)='1') then rc<=(others =>'0');	-- обнуление rc
	end if;
	if (y(3)='1') then i<=1;					-- инициализаци€ i
	end if;
	if (y(4)='1') then rc<=rc+not(ra)+1;	
	end if;
	if (y(5)='1') then rc<=rc+0;				
	end if;
	if (y(6)='1') then  rc<=rc+ra; 
	end if; 
	if (y(7)='1') then ra<=ra(2*n-2 downto 0)& '0';							
	end if;
	if (y(8)='1') then i<=i+1;
	end if;
   if (y(9)='1') then rc<=rc(2*n-2 downto 0)& '0';	
	end if;
	end if;
	end process;
	-- ‘ормируемые ќј логические услови€
	x(0)<=rb(i);   					
	x(1)<=rb(i-1); 
	x(2)<='1' when i=n else '0'; 	
end arch;