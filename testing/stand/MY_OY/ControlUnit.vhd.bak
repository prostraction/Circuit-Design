-- В этом файле содержится описание управляющего автомата ControlUnit
-- Архитектурное тело arch_mealy описывает поведение автомата МИЛИ
-- УА формирует необходимую последовательность
-- управляющих сигналов y в зависимости от значений логических условий x

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
-- Далее следует описание интерфейса УА
entity ControlUnit is
Port
		( y: out std_logic_vector(9 downto 0); 		--управляющие сигналы
	   x: in std_logic_vector(2 downto 0);  			--логические условия  
	   clk: in std_logic;  									--синхросигнал                             
		set: in std_logic; 									--сигнал начальной установки
		sno: in std_logic; 									--сигнал начала операции
		sko:out std_logic 									--сигнал конца операции
		);
end ControlUnit;

architecture arch_moore of ControlUnit is
type T_state is(s0,s1,s2,s3,s4,s5,s6,s7);			-- используем перечислимый тип для состояний УА
signal state,Next_state:T_state;				-- текущее состояние УА, следующее состояние УА
   begin
   NS:process(state,x,sno) 			-- этот процесс формирует следующее состояние УА,
												-- которое зависит от текущего состояния, логических условий, sno
	begin
	Next_state<=s0;						-- следующее s0
	case state is
 when s0 => 
	if(sno='1') 							-- если есть сигнал sno
		then Next_state<=s1;				-- то следующее s1
	else Next_state<=s0;					-- иначе s0	
	end if;
 when s1 =>
	if(x(0)='1'and x(1)='0')			
		then Next_state <=s2;			
	elsif (x(0) ='0' and x(1)='1')	
		then Next_state <=s4;			
	else Next_state<=s3;				 
	end if;
 when s2 => 
	if (x(2)='0') then Next_state<=s5;
	else Next_state<=s6;
	end if;
 when s3 =>									
	if(x(2)='0') 							
		then Next_state <=s5; 			
	else Next_state <=s6;			
	end if;
 when s4 =>									
	if (x(2)='0') 							 
		then Next_state<=s5;				
	else Next_state<=s6;				
	end if;
	when s5 =>
	if (x(0)='1' and x(1)='0') then Next_state<=s2;	
	elsif (x(0)='0' and x(1)='1') then Next_state<=s4; 
	else Next_state<=s3;
	end if;
when s6 =>
	Next_state<=s7;
when s7 =>
	Next_state<=s0;	
end case;
end process NS;

 -- Формирование управляющих сигналов  
  y<="0000001111" when state=s1 else	
     "0000010000" when state=s2 else	
     "0000100000" when state=s3 else	
     "0001000000" when state=s4 else
	  "0110000000" when state=s5 else 
	  "1000000000" when state=s6 else
	  "0000000000";							-- nmk
	  
-- Формирование сигнала конца операции	
	  sko<='1' when state=s7 else '0';	-- только, если состояние s5 
	 
 --формирование текущего состояния 
  state <=s0 when set ='1' else 				--если есть сигнал начальной установки 
  Next_state when clk'event and clk='0'	--по отрицательному фронту clk  
  else state;  
 end arch_moore ;
 
 