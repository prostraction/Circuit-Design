// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2021 20:29:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Jonson
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Jonson_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg R;
// wires                                               
wire Q_0;
wire Q_1;
wire Q_2;
wire Q_3;
wire Q_4;
wire Q_5;
wire Q_6;
wire Q_7;
wire Q_8;
wire Q_9;
wire Q_10;
wire Q_11;
wire y_1;
wire y_2;
wire y_3;
wire y_4;
wire y_5;
wire y_6;
wire y_7;
wire y_8;
wire y_9;
wire y_10;
wire y_11;
wire y_12;
wire y_13;
wire y_14;
wire y_15;
wire y_16;
wire y_17;
wire y_18;
wire y_19;
wire y_20;
wire y_21;
wire y_22;
wire y_23;
wire y_24;

// assign statements (if any)                          
Jonson i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.Q_0(Q_0),
	.Q_1(Q_1),
	.Q_2(Q_2),
	.Q_3(Q_3),
	.Q_4(Q_4),
	.Q_5(Q_5),
	.Q_6(Q_6),
	.Q_7(Q_7),
	.Q_8(Q_8),
	.Q_9(Q_9),
	.Q_10(Q_10),
	.Q_11(Q_11),
	.R(R),
	.y_1(y_1),
	.y_2(y_2),
	.y_3(y_3),
	.y_4(y_4),
	.y_5(y_5),
	.y_6(y_6),
	.y_7(y_7),
	.y_8(y_8),
	.y_9(y_9),
	.y_10(y_10),
	.y_11(y_11),
	.y_12(y_12),
	.y_13(y_13),
	.y_14(y_14),
	.y_15(y_15),
	.y_16(y_16),
	.y_17(y_17),
	.y_18(y_18),
	.y_19(y_19),
	.y_20(y_20),
	.y_21(y_21),
	.y_22(y_22),
	.y_23(y_23),
	.y_24(y_24)
);
initial 
begin 
#1000000 $stop;
end 

// C
always
begin
	C = 1'b0;
	C = #10000 1'b1;
	#10000;
end 

// R
initial
begin
	R = 1'b1;
	R = #10000 1'b0;
end 
endmodule

